use TicketWaveDB;

ALTER TABLE EVENT_ DROP CONSTRAINT event__ibfk_1;
ALTER TABLE TICKET DROP CONSTRAINT ticket_ibfk_1;
DROP TABLE IF EXISTS MANAGER;
DROP TABLE IF EXISTS CUSTOMER;
DROP TABLE IF EXISTS NOTIFY;
DROP TABLE IF EXISTS TICKET;
DROP TABLE IF EXISTS EVENT_;

CREATE TABLE MANAGER
	(NAME_ VARCHAR(40) NOT NULL,
    SURNAME VARCHAR(40) NOT NULL,
    BIRTHDATE DATE,
    MAIL VARCHAR(50) PRIMARY KEY,
    PWD VARCHAR(128) NOT NULL,       -- FUNZIONE HASH
    PROVINCE VARCHAR(30) NOT NULL,
    CARDNUMBER CHAR(16),
    MAXEVENTS SMALLINT,
    SUBSCRIPTION INT NOT NULL,
    SUBSCRIPTION_DATE DATE,
    COUNTER_CREATED_EVENTS INT);
    
CREATE TABLE CUSTOMER
	(NAME_ VARCHAR(40) NOT NULL,
    SURNAME VARCHAR(40) NOT NULL,
    BIRTHDATE DATE,
    MAIL VARCHAR(50) PRIMARY KEY,
    PWD VARCHAR(128) NOT NULL,		-- FUNZIONE HASH
    PROVINCE VARCHAR (30) NOT NULL,
    POINTS SMALLINT,
    FAVOURITE_GENRE VARCHAR(127));
    
CREATE TABLE NOTIFY ( 
	ID INT PRIMARY KEY,
    MEXAGE VARCHAR(250) NOT NULL,
    MAIL VARCHAR(50) NOT NULL,
    DATE_ DATE NOT NULL , 
    HOUR_ TIME NOT NULL 
);

CREATE TABLE EVENT_ ( 
	ID_EVENT INT PRIMARY KEY,
	NAME_ VARCHAR(70), 
    CITY VARCHAR(70) NOT NULL,
    LOCATION VARCHAR(100), 
    DATE_ DATE, 
    TIME_ TIME,
    PROVINCE VARCHAR(40) NOT NULL, 
    GENRE VARCHAR(30),
    TYPE_ VARCHAR(30),
    MAX_NUM_SEATS INT NOT NULL,
    NUM_SEATS_TYPE INT NOT NULL, 
    SOLD_BASE_SEATS INT,
    SOLD_PREMIUM_SEATS INT,
    SOLD_VIP_SEATS INT,
    REMAINING_BASE_SEATS INT, 
    REMAINING_PREMIUM_SEATS INT, 
    REMAINING_VIP_SEATS INT, 
    BASE_PRICE DOUBLE,
    PREMIUM_PRICE DOUBLE,
    VIP_PRICE DOUBLE,
    ID_MANAGER VARCHAR(50) NOT NULL,
    ARTISTS VARCHAR(300) ,
    AUTHOR VARCHAR(40),
    DESCRIPTION_ VARCHAR(1024),
    PHOTO LONGBLOB,
    
    FOREIGN KEY (ID_MANAGER) REFERENCES MANAGER(MAIL) ON UPDATE CASCADE ON DELETE CASCADE
    );
    
CREATE TABLE TICKET ( 
	BAR_CODE VARCHAR(100) PRIMARY KEY,
    ID_CUSTOMER VARCHAR(50),
    ID_EVENT INT,
    EVENT_NAME VARCHAR(70),
    PRICE DOUBLE NOT NULL, 
    TYPE_ VARCHAR(30) NOT NULL, 
    
   FOREIGN KEY (ID_CUSTOMER) REFERENCES CUSTOMER(MAIL) ON UPDATE CASCADE ON DELETE CASCADE,
   FOREIGN KEY (ID_EVENT) REFERENCES EVENT_(ID_EVENT) ON UPDATE CASCADE ON DELETE CASCADE
);